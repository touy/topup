{
  "_args": [
    [
      {
        "raw": "cot@0.0.6",
        "scope": null,
        "escapedName": "cot",
        "name": "cot",
        "rawSpec": "0.0.6",
        "spec": "0.0.6",
        "type": "version"
      },
      "E:\\topup\\node_modules\\couchdb-auto-views"
    ]
  ],
  "_from": "cot@0.0.6",
  "_id": "cot@0.0.6",
  "_inCache": true,
  "_location": "/cot",
  "_npmUser": {
    "name": "willconant",
    "email": "will.conant@gmail.com"
  },
  "_npmVersion": "1.1.66",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cot@0.0.6",
    "scope": null,
    "escapedName": "cot",
    "name": "cot",
    "rawSpec": "0.0.6",
    "spec": "0.0.6",
    "type": "version"
  },
  "_requiredBy": [
    "/couchdb-auto-views"
  ],
  "_resolved": "https://registry.npmjs.org/cot/-/cot-0.0.6.tgz",
  "_shasum": "9e34857f1b901af6f69980c8917d413d30bd5c20",
  "_shrinkwrap": null,
  "_spec": "cot@0.0.6",
  "_where": "E:\\topup\\node_modules\\couchdb-auto-views",
  "author": {
    "name": "Will Conant",
    "email": "will.conant@gmail.com",
    "url": "http://willconant.com"
  },
  "bugs": {
    "url": "https://github.com/willconant/cot-node/issues"
  },
  "dependencies": {
    "q": "0.9.x"
  },
  "description": "promise-based CouchDB library with no surprises (in a good way)",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "9e34857f1b901af6f69980c8917d413d30bd5c20",
    "tarball": "https://registry.npmjs.org/cot/-/cot-0.0.6.tgz"
  },
  "homepage": "https://github.com/willconant/cot-node#readme",
  "keywords": [
    "couch",
    "couchdb",
    "promise",
    "promises"
  ],
  "main": "cot",
  "maintainers": [
    {
      "name": "willconant",
      "email": "will.conant@gmail.com"
    }
  ],
  "name": "cot",
  "optionalDependencies": {},
  "readme": "# What is Cot? #\n\nCot is a CouchDB library for nodejs with the following benefits:\n\n  - It produces promises using the excellent Q module.\n  - It has clear method names that map almost directly to CouchDB's HTTP API.\n  - It takes advantage of redundancies in the CouchDB API to map responses back to promises.\n    For instance, `post()` treats conflicts as errors, but `put()` treats \n    conflicts as a normal state that callers can test for.\n  - It supports view and `_all_docs` queries.\n  - It supports regular changes queries and long-poll changes queries.\n  - It doesn't have any weird ORM-like behavior or caching. Documents are just\n    plain old javascript objects. Revs don't get updated on documents you pass\n    in.\n  - It doesn't implement the whole CouchDB API, but it has a generic method adequate\n    for interacting with any CouchDB URL that expects JSON as input and produces\n    JSON as output.\n    \n# Installing #\n\n    npm install cot\n\n# Examples #\n\nHere's a silly example that creates a new document and then updates it:\n\n    var Cot = require('cot');\n    var db = new Cot({hostname: 'localhost', port: 5984}).db('my-db');\n    \n    var doc = {\n        title: 'So yeah, Cot is definitely another CouchDB library'\n    };\n    \n    db.post(doc)\n    .then(function(response) {\n        doc._id = response.id;\n        doc._rev = response.rev;\n        doc.update = 'Time to update this document and save it again!';\n        return db.post(doc);\n    })\n    .then(function(response) {\n        // let's print out the rev because that would be cool\n        console.log(response.rev);\n    })\n    .fail(function(err) {\n        // if anything goes wrong, we'll end up here\n        console.log('errors are lame in examples');\n    });\n\n\nHere's an example that increments a counter and is aware of conflicts:\n\n    function incrementCounter(docId) {\n        return db.get(docId)\n        .then(function(doc) {\n            doc.counter += 1;\n            return db.put(doc);\n        })\n        .then(function(response) {\n            if (response.ok) {\n                return response;\n            } else {\n                // there was a conflict... try again\n                return incrementCounter(docId);\n            }\n        })\n    }\n\nThis pattern is very common in CouchDB, so Cot comes with a quicker way to do it:\n\n    function incrementCounter(docId) {\n        return db.update(docId, function(doc) {\n            doc.counter += 1;\n            return doc;\n        });\n    }\n    \n\n# API Reference #\n\n## cot = new Cot(opts) ##\n\n`opts` must contain the following keys:\n\n  - `port`: the port number of your couchdb server\n  - `hostname`: the hostname of your couchdb server\n\n`opts` may contain the following keys:\n\n  - `ssl`: if set to true, Cot will use https\n  - `auth`: may be set to a string in the format 'username:password' for basic auth\n\n## db = cot.db(dbName) ##\n\nReturns an object representing the specified database.\n\n\n## promise = db.info() ##\n\n`GET /<dbName>`\n\n\n## promise = db.get(docId)\n\n`GET /<dbName>/<docId>`\n\nMissing documents are treated as an error.\n\n\n## promise = db.exists(docId)\n\n`GET /<dbName>/<docId>`\n\nReturns whole document if docId exists and null if docId is missing\n\n\n## promise = db.post(doc)\n\n`POST /<dbName>`\n\nCreates a new document or updates an existing document. If `doc._id` is undefined, CouchDB will\ngenerate a new ID for you.\n\nOn 201, returns result from CouchDB which looks like: `{\"ok\":true, \"id\":\"<docId>\", \"rev\":\"<docRev>\"}`\n\nAll other status codes (including 409, conflict) are treated as errors\n\n\n## promise = db.put(doc)\n\n`PUT /<dbName>/<doc._id>`\n\nOn 409 (conflict) returns result from CouchDB which looks like: `{\"error\":\"conflict\"}`\n\nOn 201, returns result from CouchDB which looks like: `{\"ok\":true, \"id\":\"<docId>\", \"rev\":\"<docRev>\"}`\n\nAll other status codes are treated as errors.\n\n\n## promise = db.batch(doc)\n\n`POST /<dbName>?batch=ok`\n\nCreates or updates a document but doesn't wait for success. Conflicts will not be detected.\n\nOn 202, returns result from CouchDB which looks like: `{\"ok\":true, \"id\":\"<docId>\"}`\n\nThe rev isn't returned because CouchDB returns before checking for conflicts. If there is a conflict,\nthe update will be silently lost.\n\nAll other status codes are treated as errors.\n\n\n## promise = db.delete(docId, rev)\n\n`DELETE /<dbName>/<docId>?rev=<rev>`\n\nOn 200, returns result from CouchDB which looks like: `{\"ok\":true, \"id\":\"<docId>\", \"rev\":\"<docRev>\"}`\n\nAll othe status codes are treated as errors.\n\nIf you wish to gracefully handle update conflicts while deleting, use `db.put()` on a document with\n`_deleted` set to `true`:\n\n    doc._deleted = true;\n    db.put(doc).then(function(response) {\n        if (!response.ok) {\n            // there was a conflict\n        }\n    });\n\n\n## promise = db.update(docId, updateFunction)\n\nGets the specified document, passes it to `updateFunction`, and then saves the results of `updateFunction`\nover the document\n\nThe process loops if there is an update conflict.\n\nIf `updateFunction` needs to do asynchronous work, it may return a promise.\n\n\n## promise = db.bulk(arrayOfDocs)\n\n`POST /<dbName>/_bulk_docs`\n\nSee CouchDB documentation for more information\n\n\n## promise = db.view(designName, viewName, query)\n\n`GET /<dbName>/_desgin/<designName>/_view/<viewName>?<properly encoded query>`\n\nQueries a view with the given name in the given design doc. `query` should be an object with any of the following keys:\n\n  - descending\n  - endkey\n  - endkey_docid\n  - group\n  - group_level\n  - include_docs\n  - inclusive_end\n  - key\n  - limit\n  - reduce\n  - skip\n  - stale\n  - startkey\n  - startkey_docid\n  - update_seq\n\nFor more information, refer to http://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options\n\n\n## promise = db.allDocs(query)\n\n`GET /<dbName>/_all_docs?<properly encoded query>`\n\nQueries the `_all_docs` view. `query` supports the same keys as in `db.view`.\n\n\n## promise = db.viewKeys(designName, viewName, keys)\n\nQueries the specified keys from the specified view. Keys should be an array of keys.\n\n\n## promise = db.allDocsKeys(keys)\n\nLoads documents with the specified keys.\n\n\n## promise = db.changes(query)\n\nQueries the changes feed given the specified query. `query` may contain the following keys:\n\n  - `filter`: filter function to use\n  - `include_docs`: if true, results will contain entire document\n  - `limit`: the maximum number of change rows this query should return\n  - `since`: results will start immediately after the sequence number provided here\n  - `longpoll`: if true, query will send feed=longpoll\n  - `timeout`: timeout in milliseconds for logpoll queries\n\nFor more information about the CouchDB changes feed, see http://wiki.apache.org/couchdb/HTTP_database_API#Changes\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/willconant/cot-node.git"
  },
  "version": "0.0.6"
}
